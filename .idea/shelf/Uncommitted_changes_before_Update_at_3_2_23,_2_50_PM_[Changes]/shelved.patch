Index: statics.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/statics.py b/src/statics.py
rename from statics.py
rename to src/statics.py
--- a/statics.py	(revision 11cf7323cefcf984cd55e6717e9cd1574f1e3d85)
+++ b/src/statics.py	(date 1677790203900)
@@ -1,11 +1,11 @@
-'''
+"""
 contains statics
-statics are mostly board functions, kept separate from Board to keep Board lightweight
-'''
+mostly board functions, kept separate from Board to keep Board lightweight
+"""
 
 import random
 import numpy as np
-from board import Board
+from src.board import Board
 from heuristic import heuristic
 from board_functions import (
     next_moves,
@@ -17,12 +17,14 @@
 
 
 def get_best_move(board: Board, depth: int) -> None:
-    '''
+    """
     _summary_
 
     Args:
         depth (int): _description_
-    '''
+        :param depth:
+        :param board:
+    """
 
     if depth == 0:
         return
@@ -50,13 +52,13 @@
     alpha: float = -np.inf,
     beta: float = np.inf
 ):
-    '''
+    """
     looks one move ahead and returns best move based on heuristic if depth == 1
     else returns heuristic of chosen best move
 
     Returns:
         int: _description_
-    '''
+    """
 
     assert depth > 0, 'searching too far'
 
@@ -107,7 +109,7 @@
 
 
 def minimaxx(board: Board, depth: int, original_depth: int, alpha: int, beta: int) -> Board:
-    '''
+    """
     this should create boards and analyze them
 
     Args:
@@ -118,7 +120,12 @@
 
     Returns:
         _type_: _description_
-    '''
+        :param depth:
+        :param original_depth:
+        :param alpha:
+        :param beta:
+        :param board:
+    """
     if depth == 0:
         return board
 
@@ -128,7 +135,7 @@
     if current_player(board) == 1:
         max_eval = np.inf * current_player(board)
         for mov in moves:
-
+            # TODO where does i come from
             if mov.spaces[i] == 0:
                 drop_piece_into_column(mov, i)
                 move = minimax(mov, depth - 1, original_depth, alpha, beta)
@@ -164,7 +171,7 @@
 
 
 def pre_alpha_beta(board: Board, depth: int, original_depth: int):
-    '''
+    """
     _summary_
 
     Args:
@@ -173,7 +180,10 @@
 
     Returns:
         _type_: _description_
-    '''
+        :param depth:
+        :param original_depth:
+        :param board:
+    """
     if depth == 0:
         return board
 
Index: heuristic.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/heuristic.py b/src/heuristic.py
rename from heuristic.py
rename to src/heuristic.py
--- a/heuristic.py	(revision 11cf7323cefcf984cd55e6717e9cd1574f1e3d85)
+++ b/src/heuristic.py	(date 1677790132325)
@@ -1,11 +1,12 @@
-'''
+"""
 contains heuristic functions
 gives a rating of position based only on current location of pieces (no looking ahead)
-'''
+"""
 import numpy as np
-from board import Board
+from src.board import Board
 from board_functions import current_player, can_place, print_board
 
+
 # INTELLIGENCE
 # to do:
 
@@ -18,14 +19,14 @@
 
 
 def heuristic(board: Board) -> int:
-    '''
+    """
     returns heuristic evaluation of position
     the larger the number, the better the position for player 1
     the smaller the number, the better the position for player -1
 
     Returns:
         _type_: _description_
-    '''
+    """
 
     score = 0
     # player 1 will earn positive points
@@ -43,7 +44,7 @@
 
 
 def space_heuristic(board: Board, column: int, row: int) -> int:
-    '''
+    """
     _summary_
 
     Args:
@@ -53,26 +54,26 @@
 
     Returns:
         _type_: _description_
-    '''
+    """
 
     score = 0
 
     # check horizontal wins
     if (
-        column < 4 and
-        board.spaces[(row * 7) + column] != 0 and
-        (board.spaces[(row * 7) + column]
-            == board.spaces[(row * 7) + column + 1]
-            == board.spaces[(row * 7) + column + 2]
-            == board.spaces[(row * 7) + column + 3])
+            column < 4 and
+            board.spaces[(row * 7) + column] != 0 and
+            (board.spaces[(row * 7) + column]
+             == board.spaces[(row * 7) + column + 1]
+             == board.spaces[(row * 7) + column + 2]
+             == board.spaces[(row * 7) + column + 3])
     ):
         return np.inf * board.spaces[(row * 7) + column]
 
     # check downwards diagonal wins
     if (
-        column < 4 and row < 3
-        and (board.spaces[(row * 7) + column] != 0)
-        and (
+            column < 4 and row < 3
+            and (board.spaces[(row * 7) + column] != 0)
+            and (
             board.spaces[(row * 7) + column]
             == board.spaces[((row + 1) * 7) + column + 1]
             == board.spaces[((row + 2) * 7) + column + 2]
@@ -82,9 +83,9 @@
 
     # check upwards diagonal wins
     if (
-        column < 4 and row > 2
-        and (board.spaces[(row * 7) + column] != 0)
-        and (
+            column < 4 and row > 2
+            and (board.spaces[(row * 7) + column] != 0)
+            and (
             board.spaces[(row * 7) + column]
             == board.spaces[((row - 1) * 7) + column + 1]
             == board.spaces[((row - 2) * 7) + column + 2]
@@ -94,9 +95,9 @@
 
     # check vertical wins
     if (
-        row < 3
-        and (board.spaces[(row * 7) + column] != 0)
-        and (
+            row < 3
+            and (board.spaces[(row * 7) + column] != 0)
+            and (
             board.spaces[(row * 7) + column]
             == board.spaces[((row + 1) * 7) + column]
             == board.spaces[((row + 2) * 7) + column]
@@ -108,28 +109,28 @@
 
     # two vertical with an empty space on top
     if (
-        1 < row < 6
-        and (board.spaces[(row * 7) + column] != 0)
-        and (
+            1 < row < 6
+            and (board.spaces[(row * 7) + column] != 0)
+            and (
             board.spaces[(row * 7) + column]
             == board.spaces[((row - 1) * 7) + column])
-        and (board.spaces[((row - 2) * 7) + column] == 0)
+            and (board.spaces[((row - 2) * 7) + column] == 0)
     ):
         score += current_player(board)
 
     # three vertical with an empty space on top
     if (
-        2 < row < 6
-        and (board.spaces[(row * 7) + column] != 0)
-        and (
+            2 < row < 6
+            and (board.spaces[(row * 7) + column] != 0)
+            and (
             board.spaces[(row * 7) + column]
             == board.spaces[((row - 1) * 7) + column]
             == board.spaces[((row - 2) * 7) + column])
-        and (board.spaces[((row - 3) * 7) + column] == 0)
+            and (board.spaces[((row - 3) * 7) + column] == 0)
     ):
         if (
-            board.spaces[(row * 7) + column] == current_player(board)
-            and can_place(board, ((row - 3) * 7) + column)
+                board.spaces[(row * 7) + column] == current_player(board)
+                and can_place(board, ((row - 3) * 7) + column)
         ):
             score += 1000 * current_player(board)
         else:
@@ -143,31 +144,31 @@
             if (
                     # 1110
                     (
-                    (
-                        board.spaces[(row * 7) + column]
-                        == board.spaces[(row * 7) + column + 1]
-                        == board.spaces[(row * 7) + column + 2])
-                    and (
-                        0 == board.spaces[(row * 7) + column + 3])
-                )
+                            (
+                                    board.spaces[(row * 7) + column]
+                                    == board.spaces[(row * 7) + column + 1]
+                                    == board.spaces[(row * 7) + column + 2])
+                            and (
+                                    0 == board.spaces[(row * 7) + column + 3])
+                    )
                     # 1101
-                or (
+                    or (
                     (
-                        board.spaces[(row * 7) + column]
-                        == board.spaces[(row * 7) + column + 1]
-                        == board.spaces[(row * 7) + column + 3])
+                            board.spaces[(row * 7) + column]
+                            == board.spaces[(row * 7) + column + 1]
+                            == board.spaces[(row * 7) + column + 3])
                     and (
-                        0 == board.spaces[(row * 7) + column + 2])
-                )
+                            0 == board.spaces[(row * 7) + column + 2])
+            )
                     # 1011
-                or (
+                    or (
                     (
-                        board.spaces[(row * 7) + column]
-                        == board.spaces[(row * 7) + column + 2]
-                        == board.spaces[(row * 7) + column + 3])
+                            board.spaces[(row * 7) + column]
+                            == board.spaces[(row * 7) + column + 2]
+                            == board.spaces[(row * 7) + column + 3])
                     and (
-                        0 == board.spaces[(row * 7) + column + 1])
-                )
+                            0 == board.spaces[(row * 7) + column + 1])
+            )
             ):
 
                 # each configuration will have one empty space, so
@@ -177,44 +178,44 @@
                 # which OR in the previous IF condition was true
 
                 if (
-                    (board.spaces[(row * 7) + column] == current_player(board))
-                    and (
+                        (board.spaces[(row * 7) + column] == current_player(board))
+                        and (
                         can_place(board, (row * 7) + column + 1)
                         or can_place(board, (row * 7) + column + 2)
                         or can_place(board, (row * 7) + column + 3)
-                    )
+                )
                 ):
                     score += 1000 * current_player(board)
                 else:
                     score += 7 * current_player(board)
             if (
-                # 1100
-                (
-                    (
-                        board.spaces[(row * 7) + column]
-                        == board.spaces[(row * 7) + column + 1])
-                    and (
-                        0 == board.spaces[(row * 7) + column + 2]
-                        == board.spaces[(row * 7) + column + 3])
-                )
-                # 1010
-                or (
+                    # 1100
+                    (
+                            (
+                                    board.spaces[(row * 7) + column]
+                                    == board.spaces[(row * 7) + column + 1])
+                            and (
+                                    0 == board.spaces[(row * 7) + column + 2]
+                                    == board.spaces[(row * 7) + column + 3])
+                    )
+                    # 1010
+                    or (
                     (
-                        board.spaces[(row * 7) + column]
-                        == board.spaces[(row * 7) + column + 2])
+                            board.spaces[(row * 7) + column]
+                            == board.spaces[(row * 7) + column + 2])
                     and (
-                        0 == board.spaces[(row * 7) + column + 1]
-                        == board.spaces[(row * 7) + column + 3])
-                )
-                # 1001
-                or (
+                            0 == board.spaces[(row * 7) + column + 1]
+                            == board.spaces[(row * 7) + column + 3])
+            )
+                    # 1001
+                    or (
                     (
-                        board.spaces[(row * 7) + column]
-                        == board.spaces[(row * 7) + column + 3])
+                            board.spaces[(row * 7) + column]
+                            == board.spaces[(row * 7) + column + 3])
                     and (
-                        0 == board.spaces[(row * 7) + column + 1]
-                        == board.spaces[(row * 7) + column + 2])
-                )
+                            0 == board.spaces[(row * 7) + column + 1]
+                            == board.spaces[(row * 7) + column + 2])
+            )
             ):
                 if board.spaces[(row * 7) + column] == current_player(board):
                     score += current_player(board)
@@ -224,36 +225,36 @@
             if board.spaces[(row * 7) + column + 1] != 0:
                 # 0111
                 if (
-                    board.spaces[(row * 7) + column + 1]
-                    == board.spaces[(row * 7) + column + 2]
-                    == board.spaces[(row * 7) + column + 3]
+                        board.spaces[(row * 7) + column + 1]
+                        == board.spaces[(row * 7) + column + 2]
+                        == board.spaces[(row * 7) + column + 3]
                 ):
                     if (
-                        (board.spaces[(row * 7) + column + 1] == current_player(board))
-                        and (can_place(board, (row * 7) + column))
+                            (board.spaces[(row * 7) + column + 1] == current_player(board))
+                            and (can_place(board, (row * 7) + column))
                     ):
                         score += 1000 * current_player(board)
                     elif (
-                        board.spaces[(row * 7) + column + 1] == current_player(board)
+                            board.spaces[(row * 7) + column + 1] == current_player(board)
                     ):
                         score += 7 * current_player(board)
                     else:
                         score -= 7 * current_player(board)
                 if (
-                    # 0110
-                            (
-                    (board.spaces[(row * 7) + column + 1]
-                    == board.spaces[(row * 7) + column + 2])
-                    and (0
-                    == board.spaces[(row * 7) + column + 3])
-                            )
-                # 0101
-                or (
-                    (board.spaces[(row * 7) + column + 1]
-                    == board.spaces[(row * 7) + column + 3])
-                    and (0
-                    == board.spaces[(row * 7) + column + 2])
-                            )
+                        # 0110
+                        (
+                                (board.spaces[(row * 7) + column + 1]
+                                 == board.spaces[(row * 7) + column + 2])
+                                and (0
+                                     == board.spaces[(row * 7) + column + 3])
+                        )
+                        # 0101
+                        or (
+                        (board.spaces[(row * 7) + column + 1]
+                         == board.spaces[(row * 7) + column + 3])
+                        and (0
+                             == board.spaces[(row * 7) + column + 2])
+                )
                 ):
                     if board.spaces[(row * 7) + column + 1] == current_player(board):
                         score += current_player(board)
@@ -262,10 +263,10 @@
             else:
                 # 0011
                 if ((board.spaces[(row * 7) + column + 2] != 0)
-                and (
-                        board.spaces[(row * 7) + column + 2]
-                    == board.spaces[(row * 7) + column + 3]
-                            )
+                        and (
+                                board.spaces[(row * 7) + column + 2]
+                                == board.spaces[(row * 7) + column + 3]
+                        )
                 ):
                     if board.spaces[(row * 7) + column + 2] == current_player(board):
                         score += current_player(board)
@@ -276,27 +277,27 @@
     if column < 4 and row > 2:
         if board.spaces[(row * 7) + column] != 0:
             if (
-            # 1110
+                    # 1110
                     (
-                    (board.spaces[(row * 7) + column]
-                    == board.spaces[((row - 1) * 7) + column + 1]
-                    == board.spaces[((row - 2) * 7) + column + 2])
-                    and (0 == board.spaces[((row - 3) * 7) + column + 3])
-                )
-                # 1101
-                or (
+                            (board.spaces[(row * 7) + column]
+                             == board.spaces[((row - 1) * 7) + column + 1]
+                             == board.spaces[((row - 2) * 7) + column + 2])
+                            and (0 == board.spaces[((row - 3) * 7) + column + 3])
+                    )
+                    # 1101
+                    or (
                     (board.spaces[(row * 7) + column]
-                    == board.spaces[((row - 1) * 7) + column + 1]
-                    == board.spaces[((row - 3) * 7) + column + 3])
+                     == board.spaces[((row - 1) * 7) + column + 1]
+                     == board.spaces[((row - 3) * 7) + column + 3])
                     and (0 == board.spaces[((row - 2) * 7) + column + 2])
-                )
-                # 1011
-                or (
+            )
+                    # 1011
+                    or (
                     (board.spaces[(row * 7) + column]
-                    == board.spaces[((row - 2) * 7) + column + 2]
-                    == board.spaces[((row - 3) * 7) + column + 3])
+                     == board.spaces[((row - 2) * 7) + column + 2]
+                     == board.spaces[((row - 3) * 7) + column + 3])
                     and (0 == board.spaces[((row - 1) * 7) + column + 1])
-                )
+            )
             ):
                 # each scenario will have an empty space, so only
                 # 1 of the following IF's OR conditions can be true
@@ -304,45 +305,45 @@
                 # what those spaces are will depend on which OR in
                 # the previous IF condition was true
                 if (
-                    (board.spaces[(row * 7) + column] == current_player(board))
-                    and (
+                        (board.spaces[(row * 7) + column] == current_player(board))
+                        and (
                         can_place(board, ((row - 3) * 7) + column + 3)
                         or can_place(board, ((row - 2) * 7) + column + 2)
                         or can_place(board, ((row - 1) * 7) + column + 1)
-                    )
+                )
                 ):
                     score += 1000 * current_player(board)
                 elif (
-                    board.spaces[(row * 7) + column] == current_player(board)
+                        board.spaces[(row * 7) + column] == current_player(board)
                 ):
                     score += 7 * current_player(board)
                 else:
                     score -= 7 * current_player(board)
                 if (
-                    # 1100
+                        # 1100
                         (
-                        (board.spaces[(row * 7) + column]
-                        == board.spaces[((row - 1) * 7) + column + 1])
-                        and (0
-                        == board.spaces[((row - 2) * 7) + column + 2]
-                        == board.spaces[((row - 3) * 7) + column + 3])
-                    )
-                    # 1010
-                    or (
+                                (board.spaces[(row * 7) + column]
+                                 == board.spaces[((row - 1) * 7) + column + 1])
+                                and (0
+                                     == board.spaces[((row - 2) * 7) + column + 2]
+                                     == board.spaces[((row - 3) * 7) + column + 3])
+                        )
+                        # 1010
+                        or (
                         (board.spaces[(row * 7) + column]
-                        == board.spaces[((row - 2) * 7) + column + 2])
+                         == board.spaces[((row - 2) * 7) + column + 2])
                         and (0
-                        == board.spaces[((row - 1) * 7) + column + 1]
-                        == board.spaces[((row - 3) * 7) + column + 3])
-                    )
-                    # 1001
-                    or (
+                             == board.spaces[((row - 1) * 7) + column + 1]
+                             == board.spaces[((row - 3) * 7) + column + 3])
+                )
+                        # 1001
+                        or (
                         (board.spaces[(row * 7) + column]
-                        == board.spaces[((row - 3) * 7) + column + 3])
+                         == board.spaces[((row - 3) * 7) + column + 3])
                         and (0
-                        == board.spaces[((row - 1) * 7) + column + 1]
-                        == board.spaces[((row - 2) * 7) + column + 2])
-                    )
+                             == board.spaces[((row - 1) * 7) + column + 1]
+                             == board.spaces[((row - 2) * 7) + column + 2])
+                )
                 ):
                     if board.spaces[(row * 7) + column] == current_player(board):
                         score += current_player(board)
@@ -352,12 +353,12 @@
             if board.spaces[((row - 1) * 7) + column + 1] != 0:
                 # 0111
                 if (board.spaces[((row - 1) * 7) + column + 1]
-                    == board.spaces[((row - 2) * 7) + column + 2]
-                    == board.spaces[((row - 3) * 7) + column + 3]
+                        == board.spaces[((row - 2) * 7) + column + 2]
+                        == board.spaces[((row - 3) * 7) + column + 3]
                 ):
                     if (
-                        (board.spaces[((row - 1) * 7) + column + 1] == current_player(board))
-                        and (can_place(board, (row * 7) + column))
+                            (board.spaces[((row - 1) * 7) + column + 1] == current_player(board))
+                            and (can_place(board, (row * 7) + column))
                     ):
                         score += 1000 * current_player(board)
                     elif (board.spaces[((row - 1) * 7) + column + 1] == current_player(board)
@@ -366,30 +367,30 @@
                     else:
                         score -= 7 * current_player(board)
                 if (
-                    # 0110
+                        # 0110
                         (
-                            (
-                                board.spaces[((row - 1) * 7) + column + 1]
-                            == board.spaces[((row - 2) * 7) + column + 2]
-                        )
-                        and (0 == board.spaces[((row - 3) * 7) + column + 3])
-                    )
-                    # 0101
-                    or (
+                                (
+                                        board.spaces[((row - 1) * 7) + column + 1]
+                                        == board.spaces[((row - 2) * 7) + column + 2]
+                                )
+                                and (0 == board.spaces[((row - 3) * 7) + column + 3])
+                        )
+                        # 0101
+                        or (
                         (board.spaces[((row - 1) * 7) + column + 1]
-                        == board.spaces[((row - 3) * 7) + column + 3])
+                         == board.spaces[((row - 3) * 7) + column + 3])
                         and (0 == board.spaces[((row - 2) * 7) + column + 2])
-                    )
+                )
                 ):
                     score += current_player(board)
 
             else:
                 # 0011
                 if ((board.spaces[((row - 2) * 7) + column + 2] != 0)
-                and (
-                        board.spaces[((row - 2) * 7) + column + 2]
-                    == board.spaces[((row - 3) * 7) + column + 3]
-                )
+                        and (
+                                board.spaces[((row - 2) * 7) + column + 2]
+                                == board.spaces[((row - 3) * 7) + column + 3]
+                        )
                 ):
                     score += current_player(board)
 
@@ -397,33 +398,33 @@
     if column < 4 and row < 3:
         if board.spaces[(row * 7) + column] != 0:
             if (
-            # 1110
-                        (
-                (board.spaces[(row * 7) + column]
-                == board.spaces[((row + 1) * 7) + column + 1]
-                == board.spaces[((row + 2) * 7) + column + 2])
-                and (0
-                == board.spaces[((row + 3) * 7) + column + 3])
-                        )
-            # 1101
-            or (
-                (
-                board.spaces[(row * 7) + column]
-                == board.spaces[((row + 1) * 7) + column + 1]
-                == board.spaces[((row + 3) * 7) + column + 3])
-                and (0
-                == board.spaces[((row + 2) * 7) + column + 2])
-                )
-            # 1011
-            or (
-                (
-                    board.spaces[(row * 7) + column]
-                    == board.spaces[((row + 2) * 7) + column + 2]
-                    == board.spaces[((row + 3) * 7) + column + 3])
-                and (
-                    0
-                    == board.spaces[((row + 1) * 7) + column + 1])
-                )
+                    # 1110
+                    (
+                            (board.spaces[(row * 7) + column]
+                             == board.spaces[((row + 1) * 7) + column + 1]
+                             == board.spaces[((row + 2) * 7) + column + 2])
+                            and (0
+                                 == board.spaces[((row + 3) * 7) + column + 3])
+                    )
+                    # 1101
+                    or (
+                    (
+                            board.spaces[(row * 7) + column]
+                            == board.spaces[((row + 1) * 7) + column + 1]
+                            == board.spaces[((row + 3) * 7) + column + 3])
+                    and (0
+                         == board.spaces[((row + 2) * 7) + column + 2])
+            )
+                    # 1011
+                    or (
+                    (
+                            board.spaces[(row * 7) + column]
+                            == board.spaces[((row + 2) * 7) + column + 2]
+                            == board.spaces[((row + 3) * 7) + column + 3])
+                    and (
+                            0
+                            == board.spaces[((row + 1) * 7) + column + 1])
+            )
             ):
                 # each configuration will have one empty space, so only
                 # one of the following IF's OR conditions can be true
@@ -431,98 +432,98 @@
                 # what those spaces are will depend on which OR in
                 # the previous IF condition was true
                 if (
-                    (board.spaces[(row * 7) + column] == current_player(board))
-                    and (
+                        (board.spaces[(row * 7) + column] == current_player(board))
+                        and (
                         can_place(board, ((row + 3) * 7) + column + 3)
                         or can_place(board, ((row + 2) * 7) + column + 2)
                         or can_place(board, ((row + 1) * 7) + column + 1)
-                            )
+                )
                 ):
                     score += 1000 * current_player(board)
                 elif (
-                    board.spaces[(row * 7) + column] == current_player(board)
+                        board.spaces[(row * 7) + column] == current_player(board)
                 ):
                     score += 7 * current_player(board)
                 else:
                     score -= 7 * current_player(board)
             if (
-                # 1100
-                (
-                (
-                    board.spaces[(row * 7) + column]
-                    == board.spaces[((row + 1) * 7) + column + 1])
-                and (
-                    0
-                    == board.spaces[((row + 2) * 7) + column + 2]
-                    == board.spaces[((row + 3) * 7) + column + 3])
-                )
-            # 1010
-            or (
-                (
-                    board.spaces[(row * 7) + column]
-                    == board.spaces[((row + 2) * 7) + column + 2])
-                and (
-                    0
-                    == board.spaces[((row + 1) * 7) + column + 1]
-                    == board.spaces[((row + 3) * 7) + column + 3])
-                )
-            # 1001
-            or (
-                (
-                    board.spaces[(row * 7) + column]
-                    == board.spaces[((row + 3) * 7) + column + 3])
-                and (
-                    0
-                    == board.spaces[((row + 1) * 7) + column + 1]
-                    == board.spaces[((row + 2) * 7) + column + 2])
-                )
+                    # 1100
+                    (
+                            (
+                                    board.spaces[(row * 7) + column]
+                                    == board.spaces[((row + 1) * 7) + column + 1])
+                            and (
+                                    0
+                                    == board.spaces[((row + 2) * 7) + column + 2]
+                                    == board.spaces[((row + 3) * 7) + column + 3])
+                    )
+                    # 1010
+                    or (
+                    (
+                            board.spaces[(row * 7) + column]
+                            == board.spaces[((row + 2) * 7) + column + 2])
+                    and (
+                            0
+                            == board.spaces[((row + 1) * 7) + column + 1]
+                            == board.spaces[((row + 3) * 7) + column + 3])
+            )
+                    # 1001
+                    or (
+                    (
+                            board.spaces[(row * 7) + column]
+                            == board.spaces[((row + 3) * 7) + column + 3])
+                    and (
+                            0
+                            == board.spaces[((row + 1) * 7) + column + 1]
+                            == board.spaces[((row + 2) * 7) + column + 2])
+            )
             ):
                 score += current_player(board)
         else:
             if board.spaces[((row + 1) * 7) + column + 1] != 0:
                 # 0111
                 if (
-                    board.spaces[((row + 1) * 7) + column + 1]
-                    == board.spaces[((row + 2) * 7) + column + 2]
-                    == board.spaces[((row + 3) * 7) + column + 3]
+                        board.spaces[((row + 1) * 7) + column + 1]
+                        == board.spaces[((row + 2) * 7) + column + 2]
+                        == board.spaces[((row + 3) * 7) + column + 3]
                 ):
                     if (
-                        (board.spaces[((row + 1) * 7) + column + 1] == current_player(board))
-                        and (can_place(board, (row * 7) + column))
+                            (board.spaces[((row + 1) * 7) + column + 1] == current_player(board))
+                            and (can_place(board, (row * 7) + column))
                     ):
                         score += (1000 * current_player(board))
                     else:
                         score += 7 * current_player(board)
                 if (
-                    # 0110
+                        # 0110
                         (
-                            (
-                            board.spaces[((row + 1) * 7) + column + 1]
-                            == board.spaces[((row + 2) * 7) + column + 2])
-                            and (board.spaces[((row + 3) * 7) + column + 3]
-                        )
-                    )
-                    # 0101
-                or (
+                                (
+                                        board.spaces[((row + 1) * 7) + column + 1]
+                                        == board.spaces[((row + 2) * 7) + column + 2])
+                                and (board.spaces[((row + 3) * 7) + column + 3]
+                                )
+                        )
+                        # 0101
+                        or (
                         (
-                        board.spaces[((row + 1) * 7) + column + 1]
-                        == board.spaces[((row + 3) * 7) + column + 3]
-                    )
-                and (
-                    0
-                    == board.spaces[((row + 2) * 7) + column + 2])
-                            )
+                                board.spaces[((row + 1) * 7) + column + 1]
+                                == board.spaces[((row + 3) * 7) + column + 3]
+                        )
+                        and (
+                                0
+                                == board.spaces[((row + 2) * 7) + column + 2])
+                )
                 ):
                     score += current_player(board)
 
             else:
                 # 0011
                 if (
-                    (board.spaces[((row + 2) * 7) + column + 2] != 0)
-                    and (
+                        (board.spaces[((row + 2) * 7) + column + 2] != 0)
+                        and (
                         board.spaces[((row + 2) * 7) + column + 2]
                         == board.spaces[((row + 3) * 7) + column + 3]
-                    )
+                )
                 ):
                     score += current_player(board)
 
Index: board_functions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/board_functions.py b/src/board_functions.py
rename from board_functions.py
rename to src/board_functions.py
--- a/board_functions.py	(revision 11cf7323cefcf984cd55e6717e9cd1574f1e3d85)
+++ b/src/board_functions.py	(date 1677790203890)
@@ -1,20 +1,22 @@
-'''
+"""
 statics that are actually board methods
-but separate because i want to create Boards en masse
+but separate because I want to create Boards en masse
 so these are separated to keep the Board class lightweight
-'''
+"""
 
 import numpy as np
-from board import Board
+from src.board import Board
 
 
 def drop_piece_into_column(board: Board, column: int):
-    '''
+    """
     set_space and select_space for look_ahead function
 
     Args:
         column (int): _description_
-    '''
+        :param column:
+        :param board:
+    """
 
     assert isinstance(column, int), f'column should be int but is {type(column)}'
     assert isinstance(board, Board), f'board should be Board but is {type(board)}'
@@ -39,9 +41,9 @@
 
 
 def current_player(board: Board) -> int:
-    '''
+    """
     compute whose turn it is based on the existing turn
-    '''
+    """
 
     turn_sum = 0
     for space in board.spaces:
@@ -54,12 +56,12 @@
 
 
 def next_moves(board: Board) -> dict[int: Board]:
-    '''
+    """
     _summary_
 
     Returns:
         dict[int: Board]: column mapped Board after move is made in that column
-    '''
+    """
 
     possible_moves = {}
 
@@ -76,12 +78,12 @@
 
 
 def copy_board(board: Board) -> Board:
-    '''
+    """
     copy the board
 
     Returns:
         Board: _description_
-    '''
+    """
 
     board_copy = Board()
     board_copy.spaces = np.array(list(board.spaces))
@@ -89,9 +91,9 @@
 
 
 def print_board(board: Board) -> None:
-    '''
+    """
     provide visual printout of board
-    '''
+    """
 
     print('\n')
     for row in range(6):
@@ -101,7 +103,7 @@
 
 
 def print_space(board: Board, column: int, row: int) -> str:
-    '''
+    """
     convert a space to a string (for display)
 
     Args:
@@ -110,7 +112,10 @@
 
     Returns:
         str: _description_
-    '''
+        :param row:
+        :param column:
+        :param board:
+    """
 
     assert board.spaces[(row * 7) + column] in (-1, 0, 1)
 
@@ -122,7 +127,7 @@
 
 
 def can_place(board: Board, space: int) -> bool:
-    '''
+    """
     check if legal move can be made at space
 
     Args:
@@ -130,7 +135,9 @@
 
     Returns:
         bool: True if space is legal move option
-    '''
+        :param space:
+        :param board:
+    """
 
     assert (-1 < space < 42), 'space does not exist; choose between 0-41'
     if not board.spaces[space] == 0:
@@ -143,19 +150,19 @@
 
 
 def reset_board(board: Board) -> None:
-    '''
+    """
     reset the board
-    '''
+    """
     board.spaces = np.zeros(42, int)
 
 
 def get_valid_moves(board: Board) -> list[int]:
-    '''
+    """
     returns list of all squares where can_place is True
 
     Returns:
         list: valid move options
-    '''
+    """
     valid_moves = []
     for i in range(42):
         if can_place(board, i):
Index: game.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/game.py b/src/game.py
rename from game.py
rename to src/game.py
--- a/game.py	(revision 11cf7323cefcf984cd55e6717e9cd1574f1e3d85)
+++ b/src/game.py	(date 1677790132333)
@@ -1,9 +1,9 @@
-'''
+"""
 contains game class
-'''
+"""
 
 import numpy as np
-from board import Board
+from src.board import Board
 from player import Player
 from heuristic import heuristic
 from statics import minimax
@@ -17,9 +17,9 @@
 
 
 class Game:
-    '''
+    """
     game class
-    '''
+    """
     def __init__(
         self,
         player_1: str = 'human',
@@ -54,9 +54,9 @@
         self.board = Board()
 
     def play(self, rounds: int = 1) -> None:
-        '''
+        """
         play the game
-        '''
+        """
         # play matches
         matches = []
         for _ in range(rounds):
@@ -97,14 +97,14 @@
         print(f'{self.player_1.name} {player_1_score}-{draw_count}-{player_2_score} {self.player_2.name}')
 
     def play_turn(self) -> None:
-        '''
+        """
         play a turn in tictactoe
 
         Args:
             player (str, optional): _description_. Defaults to 'human'.
             turns (int, optional): _description_. Defaults to 1.
             depth (int, optional): _description_. Defaults to 4.
-        '''
+        """
 
         if self.turn == 1:
             player = self.player_1
@@ -155,18 +155,18 @@
         self.__update_result()
 
     def reset(self) -> None:
-        '''
+        """
         reset the game
-        '''
+        """
         self.turn = 1
         self.result = 0
         self.move_count = 0
         reset_board(self.board)
 
     def __update_result(self) -> None:
-        '''
+        """
         vital function that updates self.result. This function works!
-        '''
+        """
         for row in range(6):
             for column in range(7):
 
@@ -215,7 +215,7 @@
                     return
 
         # if no wins are found, self.result is set to 0.
-        # This could be useful if I decide to integrate move takebacks
+        # This could be useful if I decide to integrate move take-backs
 
         # check draw (i.e. is the board full)
         for row in range(6):
Index: player.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/player.py b/src/player.py
rename from player.py
rename to src/player.py
--- a/player.py	(revision 11cf7323cefcf984cd55e6717e9cd1574f1e3d85)
+++ b/src/player.py	(date 1677790132319)
@@ -1,12 +1,12 @@
-'''
+"""
 contains simple player class
-'''
+"""
 
 
 class Player:
-    '''
+    """
     player class
-    '''
+    """
 
     def __init__(self, strategy: str, my_turn: bool, depth: int = 3):
 
Index: test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test.py b/src/test.py
rename from test.py
rename to src/test.py
--- a/test.py	(revision 11cf7323cefcf984cd55e6717e9cd1574f1e3d85)
+++ b/src/test.py	(date 1677790132306)
@@ -1,6 +1,6 @@
-'''
+"""
 minimal main launcher
-'''
+"""
 
 from game import Game
 
@@ -15,9 +15,8 @@
     # Game('heuristic', 'heuristic').play(99)
     # Game('heuristic', 'minimax').play()
     # Game('minimax', 'heuristic').play()
-    game = Game('minimax', 'minimax')
-    game.player_1.depth = 1
-    game.player_2.depth = 2
+    game = Game('human', 'minimax')
+    game.player_2.depth = 4
     game.play(10)
 
     # Game('random', 'random').play(9)
Index: board.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/board.py b/src/board.py
rename from board.py
rename to src/board.py
--- a/board.py	(revision 11cf7323cefcf984cd55e6717e9cd1574f1e3d85)
+++ b/src/board.py	(date 1677790132314)
@@ -1,13 +1,13 @@
-'''
+"""
 contains board class
-'''
+"""
 import numpy as np
 
 
 class Board:
-    '''
+    """
     the board is a 7 x 6, seven being the horizontal length
-    the indicies begin in the top left corner, and run horizontally
+    the indices begin in the top left corner, and run horizontally
     to the right, like you would read a sentence, so,
     mapping the array to the board squares:
 
@@ -23,7 +23,7 @@
         5      35 36 37 38 39 40 41
 
 
-    '''
+    """
 
     def __init__(self, board='new'):
 
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/src/main.py
rename from main.py
rename to src/main.py
--- a/main.py	(revision 11cf7323cefcf984cd55e6717e9cd1574f1e3d85)
+++ b/src/main.py	(date 1677790132329)
@@ -1,6 +1,6 @@
-'''
+"""
 minimal main launcher
-'''
+"""
 
 from game import Game
 
diff --git a/gui.py b/src/gui.py
rename from gui.py
rename to src/gui.py
